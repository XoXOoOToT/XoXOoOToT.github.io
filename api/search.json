[{"id":"596309cd0250881615133cb44c237a29","title":"Linux常用命令","content":"\n前言在工作的时候有的时候会兼职一下运维，所以记录一下平常我平常比较常用的命令，省的在去百度之类的。\n动态扩容因为之前虚拟化服务器后，系统的分区都是采用默认的分配方式，后面发现在根目录下的容量都只有50G，而剩余动态扩容的容量都被挂载在/home下。所以需要将/home下的容量分配给/下。\n\n\n\n\n以下操作是基于 Centos7\n查看磁盘状况：   \ndf -h\n\n\n上图就是默认的分区的产生的磁盘分区的结构，可以看见/home下可用的空间为441G。\n这个时候重新分配容量的逻辑就是：\n\n将/home下的文件进行备份\n卸载/home目录（即这个逻辑卷卸载）\n删除/home逻辑卷。删除后就会有441G的空余容量，此时才开始分配容量\n将容量分配给根目录逻辑卷\n同步文件系统，完成真正的扩容\n创建/home逻辑卷，并重新挂载，再将备份还原到/home下\n\n具体操作如下：\n1、将/home下的文件进行备份\n#因为我的/run目录的可用空间4G，所以我将/home的备份文件放到/run目录下。备份路径可根据实际情况更改。\ntar  -cvf   /run/home.tar /home \n\n2、卸载/home目录\n#安装，不然fuser可能无法使用\nyum -y install psmisc\n#关闭home下的进程\nfuser -km /home/   \n#卸载home目录\numount /home       \n\n3、删除/home逻辑卷\nlvremove /dev/mapper/centos-home\n\n4、将容量分配给根目录逻辑卷\nlvextend -L +200G /dev/mapper/centos-root\t\n\n5、同步文件系统\nxfs_growfs /dev/mapper/centos-root\n\n6、创建/home逻辑卷，并重新挂载，再将备份还原到/home下\n#重建home的逻辑卷\nlvcreate -L 240G -n/dev/mapper/centos-home\t\n#创建home的文件系统\nmkfs.xfs /dev/mapper/centos-home\n#将新建的文件系统挂载到home目录下\nmount /dev/mapper/centos-home /home\t\n#恢复home目录内容\ntar -xvf /run/home.tar -C /\n\n\n\n\n\n防火墙Centos7：\n#开启80端口\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n#关闭80端口\nfirewall-cmd --zone=public --remove-port=80/tcp --permanent\n#查看80端口\nfirewall-cmd --zone=public --query-port=80/tcp --permanent\n\n#重新加载\nfirewall-cmd --reload\n#启动防火墙\nsystemctl start firewalld\n#关闭防火墙\nsystemctl stop firewalld\n#重启防火墙\nsystemctl restart firewalld\n#查看状态\nsystemctl status firewalld\n#systemctl是centos7中的命令，其实启动服务也可以使用service，在7中也是兼容这个命令的\nservice firewalld start | stop | status   \n\n#开机自启开启 | 关闭\nsystemctl enable | disable firewalld\n\n#查看所有打开的端口\nfirewall-cmd --zone=public --list-ports\n\n#开放指定端口给 指定ip访问\nfirewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"1.1.1.1\" port protocol=\"tcp\" port=\"5432\" accept\"\n\n\n\n\n\n查找\ngrep forest f.txt     #文件查找\ngrep forest f.txt cpf.txt #多文件查找\ngrep ‘log’ /home/admin -r -n #目录下查找所有符合关键字的文件\ncat f.txt | grep -i shopbase \ngrep ‘shop’ /home/admin -r -n –include *.{vm,java} #指定文件后缀\ngrep ‘shop’ /home/admin -r -n –exclude *.{vm,java} #反匹配\n\n新增硬盘动态扩容到根目录给虚拟机添加硬盘\n\n\n\n\n给新增的硬盘分区进入系统。开始分区\n像这种新增的硬盘用命令 df -h 是看不到的，所以要使用fdisk -l查看。\n[root@localhost ~]# fdisk -l\n\n#这个是最早安装系统时分配的硬盘大小\nDisk /dev/sda: 17.2 GB, 17179869184 bytes, 33554432 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0x0000d07f\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sda1   *        2048     2099199     1048576   83  Linux\n/dev/sda2         2099200    33554431    15727616   8e  Linux LVM\n\n\n#这个是我第一次新增的硬盘，这个已经扩容到根目录下了。\nDisk /dev/sdb: 17.2 GB, 17179869184 bytes, 33554432 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0xdc58bb63\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdb1            2048    33554431    16776192   8e  Linux LVM\n\n\n#这个是我第二次新增的硬盘，下面将把这个扩容到根目录下。记住硬盘路径 /dev/sdc，分区的时候会用到\nDisk /dev/sdc: 17.2 GB, 17179869184 bytes, 33554432 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n\n#这里就是我们根目录的大小。\nDisk /dev/mapper/centos-root: 30.9 GB, 30920409088 bytes, 60391424 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n#这个是交换分区的大小\nDisk /dev/mapper/centos-swap: 1719 MB, 1719664640 bytes, 3358720 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\n\n\n新增硬盘分区和扩容硬盘分区#这个对应上面的新增硬盘路径，\n[root@localhost ~]# fdisk /dev/sdc\n\n###########这边就是进入到硬盘的分区。########################333\nWelcome to fdisk (util-linux 2.23.2).\n\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nDevice does not contain a recognized partition table\nBuilding a new DOS disklabel with disk identifier 0x3781fe3e.\n\n###############这里是主要操作。输入m查看对应命令\nCommand (m for help): m\nCommand action\n   a   toggle a bootable flag            \n   b   edit bsd disklabel\n   c   toggle the dos compatibility flag\n   d   delete a partition\n   g   create a new empty GPT partition table\n   G   create an IRIX (SGI) partition table\n   l   list known partition types\n   m   print this menu \n   n   add a new partition                         #新增分区，这个也常用到\n   o   create a new empty DOS partition table\n   p   print the partition table                    #查看分区表。这个经常用到\n   q   quit without saving changes\n   s   create a new empty Sun disklabel\n   t   change a partition's system id              #修改分区的类型，默认是LINUX，我们等下要改成                                                     LINUX LVM(动态)\n   u   change display/entry units\n   v   verify the partition table\n   w   write table to disk and exit                #保存分区并退出\n   x   extra functionality (experts only)\n\n##############接下来开始 新建分区，输入n\nCommand (m for help): n\n##这里选择分区类型，是主分区还是扩展，我们选择主分区。\nPartition type:\n   p   primary (0 primary, 0 extended, 4 free)\n   e   extended\n###选择主分区\nSelect (default p): p\n##主分区只能有4个，因为这个我第二个分区，所以我从2开始。\nPartition number (1-4, default 1): 2\n##这个是磁盘的扇区气起始位置，默认即可\nFirst sector (2048-33554431, default 2048): \nUsing default value 2048\n##这个为磁盘扇区结束位置。默认即可\nLast sector, +sectors or +size&#123;K,M,G&#125; (2048-33554431, default 33554431): \nUsing default value 33554431\n###可以看到16G的分区已经出来了。\nPartition 2 of type Linux and of size 16 GiB is set\n\n###########这个时候查看已经建完的分区  \nCommand (m for help): p\n\nDisk /dev/sdc: 17.2 GB, 17179869184 bytes, 33554432 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0x3781fe3e\n\n#### 这个分区已经分区完成，挂载在/dev/sdc2路径，且分区格式是LINUX，现在我们要将格式改为LVM。\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdc2            2048    33554431    16776192   83  Linux\n\n####开始修改分区格式\nCommand (m for help): t\nSelected partition 2\n#输入 8e，修改LVM\nHex code (type L to list all codes): 8e\n#修改成功\nChanged type of partition 'Linux' to 'Linux LVM'\n##再次查看是否成功\nCommand (m for help): p\n\nDisk /dev/sdc: 17.2 GB, 17179869184 bytes, 33554432 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0x3781fe3e\n####变成了LVM\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdc2            2048    33554431    16776192   8e  Linux LVM\n\n###保存即可。\nCommand (m for help): w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\nSyncing disks.\n############至此分区完成。\n\n\n\n\n\n\n扩容这个时候开始将刚才分完的空间扩容给根目录。\n#进入LVM模式，开始扩容\n[root@localhost ~]# lvm\n#创建pv  这个路径对应上面的路径\nlvm> pvcreate /dev/sdc2\n  Physical volume \"/dev/sdc2\" successfully created.\n##先查看一下卷组\nlvm> pvdisplay\n\n ###这里可以看到物理卷组的信息\n  --- Physical volume ---\n  PV Name               /dev/sda2\n  ###这个VG Name对应的值就是我们等下要添加的卷组，这里是centos.\n  VG Name               centos\n  PV Size               &lt;15.00 GiB / not usable 3.00 MiB\n  Allocatable           yes (but full)\n  PE Size               4.00 MiB\n  Total PE              3839\n  Free PE               0\n  Allocated PE          3839\n  PV UUID               TmCzjX-TDeL-7hNM-e4Am-5Zyv-05Hi-cuc9Lc\n   \n  --- Physical volume ---\n  PV Name               /dev/sdb1\n  VG Name               centos\n  PV Size               &lt;16.00 GiB / not usable 3.00 MiB\n  Allocatable           yes (but full)\n  PE Size               4.00 MiB\n  Total PE              4095\n  Free PE               0\n  Allocated PE          4095\n  PV UUID               Xyp72C-5CNl-Nww5-9SO1-Jncc-TX56-nfq9rR\n###往这个卷组里面添加  我们的硬盘路径。\nlvm> vgextend centos /dev/sdc2\n  Volume group \"centos\" successfully extended\n### 然后就可以把容量转给根目录。\nlvm> lvextend -L +15G /dev/mapper/centos-root\n  Size of logical volume centos/root changed from &lt;28.80 GiB (7372 extents) to &lt;43.80 GiB (11212 extents).\n  Logical volume centos/root successfully resized.\n#退出  \nlvm> quit\n\n\n##这个时候还没有真正的把容量扩过去，还需执行一个命令（这里需要根据系统文件格式来执行不同的命令）\n#我们先查看根目录的文件格式 ---》可以看到是xfs\n[root@localhost ~]# cat /etc/fstab | grep centos-root\n/dev/mapper/centos-root /                       xfs     defaults        0 0\n\n#这里就用xfs的命令来进行最后的扩容\n[root@localhost ~]#  xfs_growfs /dev/mapper/centos-root\n########结果###############\nmeta-data=/dev/mapper/centos-root isize=512    agcount=9, agsize=877824 blks\n         =                       sectsz=512   attr=2, projid32bit=1\n         =                       crc=1        finobt=0 spinodes=0\ndata     =                       bsize=4096   blocks=7548928, imaxpct=25\n         =                       sunit=0      swidth=0 blks\nnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1\nlog      =internal               bsize=4096   blocks=2560, version=2\n         =                       sectsz=512   sunit=0 blks, lazy-count=1\nrealtime =none                   extsz=4096   blocks=0, rtextents=0\ndata blocks changed from 7548928 to 11481088\n########结果###############\n\n##查看是否成功，\n[root@localhost ~]# df -h\nFilesystem               Size  Used Avail Use% Mounted on\n/dev/mapper/centos-root   44G 1010M   43G   3% /\ndevtmpfs                 899M     0  899M   0% /dev\ntmpfs                    911M     0  911M   0% /dev/shm\ntmpfs                    911M  9.5M  902M   2% /run\ntmpfs                    911M     0  911M   0% /sys/fs/cgroup\n/dev/sda1               1014M  142M  873M  14% /boot\ntmpfs                    183M     0  183M   0% /run/user/0\n\n\n\n\n###查看是否添加成功\n\n###这个是还没扩容前\n[root@localhost ~]# df -h\nFilesystem               Size  Used Avail Use% Mounted on\n/dev/mapper/centos-root   29G 1010M   28G   4% /\ndevtmpfs                 899M     0  899M   0% /dev\ntmpfs                    911M     0  911M   0% /dev/shm\ntmpfs                    911M  9.5M  902M   2% /run\ntmpfs                    911M     0  911M   0% /sys/fs/cgroup\n/dev/sda1               1014M  142M  873M  14% /boot\ntmpfs                    183M     0  183M   0% /run/user/0\n\n####这个是扩容后，可以看到的确是增加了15G.\n[root@localhost ~]# df -h\nFilesystem               Size  Used Avail Use% Mounted on\n/dev/mapper/centos-root   44G 1010M   43G   3% /\ndevtmpfs                 899M     0  899M   0% /dev\ntmpfs                    911M     0  911M   0% /dev/shm\ntmpfs                    911M  9.5M  902M   2% /run\ntmpfs                    911M     0  911M   0% /sys/fs/cgroup\n/dev/sda1               1014M  142M  873M  14% /boot\ntmpfs                    183M     0  183M   0% /run/user/0\n\n\n\n\n\n新增硬盘挂载到其它目录新增硬盘可以查看6.1，操作是一样。\n硬盘分区及格式化#这个分区和第6章并无差别。\n[root@localhost ~]# fdisk /dev/sdd\nWelcome to fdisk (util-linux 2.23.2).\n\nChanges will remain in memory only, until you decide to write them.\nBe careful before using the write command.\n\nDevice does not contain a recognized partition table\nBuilding a new DOS disklabel with disk identifier 0x971a5778.\n##查看帮助\nCommand (m for help): m\nCommand action\n   a   toggle a bootable flag\n   b   edit bsd disklabel\n   c   toggle the dos compatibility flag\n   d   delete a partition\n   g   create a new empty GPT partition table\n   G   create an IRIX (SGI) partition table\n   l   list known partition types\n   m   print this menu\n   n   add a new partition\n   o   create a new empty DOS partition table\n   p   print the partition table\n   q   quit without saving changes\n   s   create a new empty Sun disklabel\n   t   change a partition's system id\n   u   change display/entry units\n   v   verify the partition table\n   w   write table to disk and exit\n   x   extra functionality (experts only)\n\n###创建新分区\nCommand (m for help): n\nPartition type:\n   p   primary (0 primary, 0 extended, 4 free)\n   e   extended\n##选择主分区\nSelect (default p): p\n##因为我上面创建了2个了，所以我选择3\nPartition number (1-4, default 1): 3\nFirst sector (2048-33554431, default 2048): \nUsing default value 2048\nLast sector, +sectors or +size&#123;K,M,G&#125; (2048-33554431, default 33554431): \nUsing default value 33554431\nPartition 3 of type Linux and of size 16 GiB is set\n\n#更改分区格式 为lvm，方便以后动态扩容。\nCommand (m for help): t\nSelected partition 3\nHex code (type L to list all codes): 8e\nChanged type of partition 'Linux' to 'Linux LVM'\n\nCommand (m for help): p\n\nDisk /dev/sdd: 17.2 GB, 17179869184 bytes, 33554432 sectors\nUnits = sectors of 1 * 512 = 512 bytes\nSector size (logical/physical): 512 bytes / 512 bytes\nI/O size (minimum/optimal): 512 bytes / 512 bytes\nDisk label type: dos\nDisk identifier: 0x971a5778\n\n   Device Boot      Start         End      Blocks   Id  System\n/dev/sdd3            2048    33554431    16776192   8e  Linux LVM\n\n\n###写入 保存并退出。\nCommand (m for help): w\nThe partition table has been altered!\n\nCalling ioctl() to re-read partition table.\nSyncing disks.\n\n\n####格式化硬盘  ext4是硬盘格式。\n[root@localhost ~]# mkfs -t ext4 -c /dev/sdd3\nmke2fs 1.42.9 (28-Dec-2013)\nFilesystem label=\nOS type: Linux\nBlock size=4096 (log=2)\nFragment size=4096 (log=2)\nStride=0 blocks, Stripe width=0 blocks\n1048576 inodes, 4194048 blocks\n209702 blocks (5.00%) reserved for the super user\nFirst data block=0\nMaximum filesystem blocks=4294967296\n128 block groups\n32768 blocks per group, 32768 fragments per group\n8192 inodes per group\nSuperblock backups stored on blocks: \n\t32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, \n\t4096000\n\nChecking for bad blocks (read-only test): done                                                 \nAllocating group tables: done                            \nWriting inode tables: done                            \nCreating journal (32768 blocks): done\nWriting superblocks and filesystem accounting information:        \ndone\n\n###格式化完后，开始创建文件夹，然后挂载硬盘\n[root@localhost ~]# mkdir /mnt/sdd\n##挂载。\n[root@localhost /]# mount /dev/sdd3 /mnt/sdd\n##查看是否挂载成功\n[root@localhost /]# df -h\nFilesystem               Size  Used Avail Use% Mounted on\n/dev/mapper/centos-root   44G 1010M   43G   3% /\ndevtmpfs                 899M     0  899M   0% /dev\ntmpfs                    911M     0  911M   0% /dev/shm\ntmpfs                    911M  9.5M  902M   2% /run\ntmpfs                    911M     0  911M   0% /sys/fs/cgroup\n/dev/sda1               1014M  142M  873M  14% /boot\ntmpfs                    183M     0  183M   0% /run/user/0\n###被挂载在/mnt/sdd下\n/dev/sdd3                 16G   45M   15G   1% /mnt/sdd\n\n\n\n","slug":"Linux常用命令","date":"2021-07-07T03:08:45.000Z","categories_index":"Linux","tags_index":"Linux","author_index":"96loveslife"},{"id":"cc28c8e7df72b9e1dcfbf18f5ae2769e","title":"Mysql离线安装","content":"\n\n前言因为部分原因，内网不能连上互联网，所以环境搭建只能使用离线安装的方法。在此记录一下mysql的5.7的离线安装。\n\n\n\n\nMYSQL5.7版本基础环境安装首先将系统自带的mariadb删除\n[root@localhost &#x2F;]# rpm -qa |grep mariadb\nmariadb-libs-5.5.56-2.el7.x86_64\n[root@localhost &#x2F;]# rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64\n[root@localhost &#x2F;]# rpm -qa |grep mariadb\n\n查看是否安装libaio[root@hadoop app]# rpm -qa|grep libaio\nlibaio-0.3.109-13.el7.x86_64  \n\n\n\n如果没有安装libaio需要去离线安装，步骤如下：\n1、http://mirror.centos.org/centos/6/os/x86_64/Packages/ 进入网址\n\n\n\n\n\n\n2、安装对应rpm\n[root@localhost mysql]# rpm -ivh &#x2F;opt&#x2F;libaio-0.3.107-10.el6.i686.rpm  \nwarning: &#x2F;opt&#x2F;libaio-0.3.107-10.el6.i686.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID c105b9de: NOKEY\nPreparing...                          ################################# [100%]\n  package libaio-0.3.109-13.el7.x86_64 (which is newer than libaio-0.3.107-10.el6.i686) is already installed\n[root@localhost mysql]# rpm -qa |grep libaio\nlibaio-0.3.109-13.el7.x86_64\n\n\n\n\n查看是否安装perl如果不是最小化安装的centos系统，正常是会有perl的，如果没有，请按以下步骤安装。\n1、利用可以连接外网的centos下载perl的rpm包，因为一个个依赖下载十分麻烦，所以还是需要有一台能连外网的机子来下载对应的包最后上传到服务器。\n#注意这步操作需要 一台可以连外网的机子。\n#这个是下载不安装，最后可以在&#x2F;opt&#x2F;perl下看到对应rpm包  \nyum  install --downloadonly --downloaddir&#x3D;&#x2F;opt&#x2F;perl  perl\n\n\n\n\n\n2、将上面下载的包复制到服务器上进行安装。（我将文件放在/opt/perl路径下）\n#进入到&#x2F;opt&#x2F;perl路径，安装perl\n[root@localhost opt]# cd perl\n[root@localhost perl]# rpm -ivh *.rpm\n\n##################等待安装完成\nwarning: perl-5.16.3-294.el7_6.x86_64.rpm: Header V3 RSA&#x2F;SHA256 Signature, key ID f4a80eb5: NOKEY\nPreparing...                          ################################# [100%]\nUpdating &#x2F; installing...\n   1:perl-parent-1:0.225-244.el7      ################################# [  4%]\n   2:perl-HTTP-Tiny-0.033-3.el7       ################################# [  7%]\n   3:perl-podlators-2.5.1-3.el7       ################################# [ 11%]\n   4:perl-Pod-Perldoc-3.20-4.el7      ################################# [ 15%]\n   5:perl-Pod-Escapes-1:1.04-294.el7_6################################# [ 19%]\n   6:perl-Text-ParseWords-3.29-4.el7  ################################# [ 22%]\n   7:perl-Encode-2.51-7.el7           ################################# [ 26%]\n   8:perl-Pod-Usage-1.63-3.el7        ################################# [ 30%]\n   9:perl-constant-1.27-2.el7         ################################# [ 33%]\n  10:perl-Carp-1.26-244.el7           ################################# [ 37%]\n  11:perl-Exporter-5.68-3.el7         ################################# [ 41%]\n  12:perl-Filter-1.49-3.el7           ################################# [ 44%]\n  13:perl-libs-4:5.16.3-294.el7_6     ################################# [ 48%]\n  14:perl-macros-4:5.16.3-294.el7_6   ################################# [ 52%]\n  15:perl-File-Path-2.09-2.el7        ################################# [ 56%]\n  16:perl-File-Temp-0.23.01-3.el7     ################################# [ 59%]\n  17:perl-PathTools-3.40-5.el7        ################################# [ 63%]\n  18:perl-Scalar-List-Utils-1.27-248.e################################# [ 67%]\n  19:perl-Socket-2.010-4.el7          ################################# [ 70%]\n  20:perl-Storable-2.45-3.el7         ################################# [ 74%]\n  21:perl-threads-1.87-4.el7          ################################# [ 78%]\n  22:perl-threads-shared-1.43-6.el7   ################################# [ 81%]\n  23:perl-Time-HiRes-4:1.9725-3.el7   ################################# [ 85%]\n  24:perl-Pod-Simple-1:3.28-4.el7     ################################# [ 89%]\n  25:perl-Getopt-Long-2.40-3.el7      ################################# [ 93%]\n  26:perl-Time-Local-1.2300-2.el7     ################################# [ 96%]\n  27:perl-4:5.16.3-294.el7_6          ################################# [100%]\n##################  等待安装完成\n\n\n\n\n查看是否安装net-tool#可以使用这个命令查看是否安装，若出现 not command 就是没有安装\nnetstat -apn |grep 80\n\n下载地址：https://pkgs.org/download/net-tools\n\n\n\n\n\n\n\n\n下载对应的rpm包上传至服务器\n#输入安装命令,\nrpm -ivh net-tools-2.0-0.24.20131004git.el7.x86_64.rpm\n\n\n\n创建mysql用户及用户组#创建用户组\ngroupadd mysql\n#创建用户并设置对应用户组\nuseradd -g mysql mysql\n#设置密码\npasswd mysql\n\n\n\n\n\n安装mysql去官网下载对应rpm包上传至服务器\n\n\n\n\n\n\n\n上传服务器并解压\n\n#这里我将源码包放在&#x2F;opt&#x2F;mysql下\n[root@localhost opt]# mkdir mysql\n[root@localhost opt]# tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar  &#x2F;opt&#x2F;mysql&#x2F;*\n\n\n\n按照顺序安装#要是先麻烦 也可以该目录直接 rpm -ivh *.rpm\n#我这里是指定安装这个4个。\n[root@localhost mysql]# rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm\n[root@localhost mysql]# rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm\n[root@localhost mysql]# rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm\n[root@localhost mysql]# rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm\n\n\n\n初始化数据库#5.7虽然不推荐使用这个脚本初始化数据库，但是还是可以使用。  这里我将数据库数据放到&#x2F;opt&#x2F;mysql&#x2F;data下。\n[root@localhost opt]# mysql_install_db --datadir&#x3D;&#x2F;opt&#x2F;mysql&#x2F;data\n#有这个提示，别担心，这已经初始化完成了。\n2019-05-13 00:18:23 [WARNING] mysql_install_db is deprecated. Please consider switching to mysqld --initialize\n\n#这里配置mysql用户组。\n[root@localhost mysql]# chown -R mysql:mysql &#x2F;opt&#x2F;mysql&#x2F;data\n\n#启动mysql服务\n[root@localhost mysql]# systemctl start mysqld.service\n\n#查看MySQL服务状态\n[root@localhost mysql]# systemctl status mysqld.service\n● mysqld.service - MySQL Server\n   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service; enabled; vendor preset: disabled)\n   Active: active (running) since Mon 2019-05-13 00:21:23 CST; 20s ago\n     Docs: man:mysqld(8)\n           http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html\n  Process: 1668 ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid $MYSQLD_OPTS (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n  Process: 1595 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqld_pre_systemd (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)\n Main PID: 1671 (mysqld)\n   CGroup: &#x2F;system.slice&#x2F;mysqld.service\n           └─1671 &#x2F;usr&#x2F;sbin&#x2F;mysqld --daemonize --pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid\n\nMay 13 00:21:20 localhost.localdomain systemd[1]: Starting MySQL Server...\nMay 13 00:21:23 localhost.localdomain systemd[1]: Started MySQL Server.\n\n\n\n修改mysql密码并开启远程访问#查看mysql默认随机密码\n[root@localhost mysql]# grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log\n#这里密码为uE%gonkuW4VA\n2019-05-12T16:21:20.582741Z 1 [Note] A temporary password is generated for root@localhost: uE%gonkuW4VA\n#进入MySQL修改密码\n[root@localhost mysql]# mysql -uroot -puE%gonkuW4VA\n#设置密码，因为mysql5.7有密码策略，所以不能设置简单的密码，这里建议是直接设置复杂密码。\nmysql&gt; set password&#x3D;password(&#39;wkx199614.&#39;);\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\n#刷新\nmysql&gt; flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n\n####下面开始开启远程访问\nmysql&gt; update user set host&#x3D;&#39;%&#39; where user &#x3D;&#39;root&#39;;\nQuery OK, 1 row affected (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 0\nmysql&gt; flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n\n\n\n注意事项mysql5.7和5.6修改密码的方式不一样，由于字段名的改变，所以5.7修改密码的命令为：mysql&gt; use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\n#密码的字段从password变成了authentication_string\nmysql&gt; select user,host,authentication_string from user;\n+---------------+-----------+-------------------------------------------+\n| user          | host      | authentication_string                     |\n+---------------+-----------+-------------------------------------------+\n| root          | %         | *F2DE15FBAC7024876F559D6FFBCF1D611D565421 |\n| mysql.session | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n| mysql.sys     | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |\n+---------------+-----------+-------------------------------------------+\n3 rows in set (0.00 sec)\n\n#若不修改密码策略，可能会出现这个错误\nmysql&gt; update user set authentication_string&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39; and host&#x3D;&#39;%&#39;;\nERROR 1819 (HY000): Your password does not satisfy the current policy requirements\n\n#查看密码策略，修改密码策略。\nmysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;; \n+--------------------------------------+--------+\n| Variable_name                        | Value  |\n+--------------------------------------+--------+\n| validate_password_check_user_name    | OFF    |\n| validate_password_dictionary_file    |        |\n| validate_password_length             | 8      |\n| validate_password_mixed_case_count   | 1      |\n| validate_password_number_count       | 1      |\n| validate_password_policy             | MEDIUM |\n| validate_password_special_char_count | 1      |\n+--------------------------------------+--------+\n7 rows in set (0.01 sec)\n\n\nmysql&gt;  set global validate_password_policy&#x3D;LOW; \nQuery OK, 0 rows affected (0.00 sec)\n#将密码长度改成4\nmysql&gt; set global validate_password_length&#x3D;4;\nQuery OK, 0 rows affected (0.00 sec)\n#刷新\nmysql&gt; flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n#查看是否修改成功\nmysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;; \n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password_check_user_name    | OFF   |\n| validate_password_dictionary_file    |       |\n| validate_password_length             | 4     |\n| validate_password_mixed_case_count   | 1     |\n| validate_password_number_count       | 1     |\n| validate_password_policy             | LOW   |\n| validate_password_special_char_count | 1     |\n+--------------------------------------+-------+\n7 rows in set (0.00 sec)\n\n#修改密码\nmysql&gt; update user set authentication_string&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39; and host&#x3D;&#39;%&#39;;\nQuery OK, 1 row affected, 1 warning (0.00 sec)\nRows matched: 1  Changed: 1  Warnings: 1\nmysql&gt; flush privileges;\nQuery OK, 0 rows affected (0.00 sec)\n","slug":"Mysql离线安装","date":"2019-07-08T07:26:09.000Z","categories_index":"运维","tags_index":"运维","author_index":"96loveslife"},{"id":"eedcb098857bb84429a9da676b0dd51c","title":"Jenkins自动化构建","content":"\n\n\n\n前言在此记录一下jenkins的配置即自动化部署的步骤。\n\n\n\n\nJenkins的环境配置首先maven，git，jdk都必须和jenkins安装在同一个服务器。\n下载插件（通用插件）\n\n\nDeploy to container Plugin(这个用来发布war的应用，推送到指定服务器上的tomcat)\n\n\n\nMaven Integration plugin（maven插件）\n\n\nGit plugin（git插件）\n\n\nSubversion Plug-in（svn）\n\n\npublish over ssh （将构建完的包传到指定服务器）\n\n\n配置基础环境\n\n配置Maven的conf\n\n配置jdk\n\n配置git\n\n\n\n配置maven\n\n\n\n\n\n\n\n配置需要推送的服务器地址\n\n\n\n\n\n\n\n\n\n\n\n\n\n新建部署任务新建任务\n\n配置Job\n\n\n\n添加Credentitals\n\n\n\n配置触发器（Build Triggers）\n这里由于修改了svn仓库的webhook所以当有代码提交会自动更新部署。\n定时任务用法\n\n\n名称\n区别\n\n\n\n定时构建\n定时构建是不管仓库中的 代码有没有变，到了时间就会构建\n\n\n轮询SCM\n轮询是定时检查源码有没有变，变了才会checkout出来构建。\n\n\n定时器构建语法：*  *  *  *  *\n\n星号之间是有个空格的！！！！\n第一个*代表分钟，范围0-59\n第二个*代表小事，范围0-23\n第三个*代表一个月的第几天，范围1-31\n第四个*代表第几个月，范围1-12\n第五个*代表一周中的第几天，范围0-7，其中0和7都代表周天\n\n举个栗子：\n1、每10分钟构建一次————-》   H/10 * * * *        ==其中H是形参（必须是H）==\n2、每10个小时构建一次———-》  H H/10 * * *   \n3、每天23点，6点构建一次——》 0  6,23 * * *     像多个时间点就用逗号隔开。\n构建环境（build environment）\n构建（Build）\n\n\n\n\n\n注意事项这个POM的路径是根据你要构建项目的pom来决定的。\n举个栗子：\n这个项目的项目结构是这样的。\n\n\n像这样项目结构的，我们直接用最外面的父POM就可以。\n但是如果是我只想要一个父项目里面的指定的一个子模块，就需要指定编译pom文件路径。\n例如这个项目的结构是：\n\n\n所以system的pom的构建路径就会变成：\n\n\n\n\n\n\n构建后（post-build Action）\n\n\n\n\n\n脚本配置把下面的脚本复制到对应服务器上的对应文件夹，并命名为start.sh。请注意编码，不然可能会出现脚本错误，例如空格之类的。\n脚本内容及需要修改的地方TE&#x3D;$(date +%Y%m%d%H%M)\nexport JAVA_HOME PATH CLASSPATH\n#这个是服务器上的java环境变量（自行修改）\nJAVA_HOME&#x3D;&#x2F;opt&#x2F;java&#x2F;jdk1.8.0_191\nPATH&#x3D;$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;bin:$PATH\nCLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib:$JAVA_HOME&#x2F;jre&#x2F;lib:$CLASSPATH\n#这个是目标文件夹(需要修改，按自己设置的路径修改)\nDIR&#x3D;&#x2F;usr&#x2F;jenkins-project&#x2F;test&#x2F;\n#这个是jenkins构建完后发送过来的jar包\nJARFILE&#x3D;test.jar\n\n#这个是备份，正常是不需要的，默认注释掉。\n#if [ ! -d $DIR&#x2F;backup ];then\n#   mkdir -p $DIR&#x2F;backup\n#fi\ncd $DIR\n\n#ps -ef | grep $JARFILE | grep -v grep | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9\n#这一步是杀死程序，这里是按照jar包名称来，所以如果构建多个同个项目的，需要修改jar包名字，不然会被误杀。\nps -ef|grep $JARFILE | grep -v grep | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9\n\n#cp  $JARFILE backup&#x2F;$JARFILE$TE\n#mv -f $DIR&#x2F;$JARFILE .\n\n#启动项目(springboot项目)\njava -jar $JARFILE --spring.profiles.active&#x3D;prod  &gt; out.log &amp;\nif [ $? &#x3D; 0 ];then\n        sleep 30\n        tail -n 50 out.log\nfi\n\n\n\n\n\n构建项目\n\n\n\n\n\nwar包的部署war包项目只有最后一步和其他项目不一样即发送到服务器的方式。\n\n\n需要发送war到指定服务器的tomcat上。所以我们需要修改那台服务器tomcat认证文件配置。\n添加tomcat认证==修改tomcat文件conf下的tomcat-users.xml==\n&lt;?xml version='1.0' encoding='utf-8'?>\n&lt;tomcat-users>\n\n  &lt;role rolename=\"tomcat\"/>\n  &lt;role rolename=\"role1\"/>\n  &lt;role rolename=\"manager-gui\" />\n  &lt;role rolename=\"manager-script\" />\n  &lt;role rolename=\"manager-status\" />\n    \n  &lt;!--加入这一句！！！！！！！！！然后在jenkins上添加这个用户。-->\n  &lt;user username=\"tomcat\" password=\"tomcat\" roles=\"tomcat,manager-gui,manager-script,manager-status\"/>\n  \n  &lt;user username=\"both\" password=\"tomcat\" roles=\"tomcat,role1\"/>\n  &lt;user username=\"role1\" password=\"tomcat\" roles=\"role1\"/>\n  \n&lt;/tomcat-users>\n\n\n\n\n部署方案\n\n\n\n\n\n\n\nsvn和git的webhook实现自动构建svn的webhook需要在svn的仓库中添加一个脚本，实现svn请求jenkins实现自动构建。\n1、首先找到svn的hooks目录。\n这个目录是在svn的仓库路径，就是svn存放项目路径下。\n#我是使用这中暴力搜索，\n[root@ty14 csvn]# find &#x2F; -name svn\n&#x2F;opt&#x2F;csvn&#x2F;bin&#x2F;svn\n&#x2F;opt&#x2F;csvn&#x2F;lib&#x2F;svn-python.2.7&#x2F;svn\n&#x2F;opt&#x2F;csvn&#x2F;lib&#x2F;svn-python.2.4&#x2F;svn\n&#x2F;opt&#x2F;csvn&#x2F;lib&#x2F;svn-python.2.5&#x2F;svn\n&#x2F;opt&#x2F;csvn&#x2F;lib&#x2F;svn-python.2.6&#x2F;svn\n&#x2F;opt&#x2F;csvn&#x2F;lib&#x2F;viewvc&#x2F;vclib&#x2F;svn\n&#x2F;opt&#x2F;apache-tomcat-8.5.31&#x2F;work&#x2F;Catalina&#x2F;localhost&#x2F;svnadmin&#x2F;org&#x2F;apache&#x2F;jsp&#x2F;WEB_002dINF&#x2F;views&#x2F;svn\n&#x2F;mnt&#x2F;sdb1&#x2F;svn\n&#x2F;svn\n#找到了仓库路径。\n[root@ty14 csvn]# cd &#x2F;mnt&#x2F;sdb1&#x2F;svn\n#就在这个repositories下。\n[root@ty14 svn]# ls\ndumps  repositories\n#这下面就是对应某个仓库，例如我要让dev1，里面的项目开启webhook。进入到该文件夹，写入脚本\n[root@ty14 repositories]# ls\ndev1  dev4  dev5  project\n#hooks就这么找到了\n[root@ty14 dev1]# ls\nconf  dav  db  format  hooks  locks  README.txt\n#这个post-commit.tmpl 就是我们要修改的脚本，将它复制一份，重新编写\n[root@ty14 hooks]# ls\npost-lock.tmpl            post-unlock.tmpl  pre-lock.tmpl            pre-unlock.tmpl\npost-commit.tmpl  post-revprop-change.tmpl  pre-commit.tmpl   pre-revprop-change.tmpl  start-commit.tmpl\n[root@ty14 hooks]# cp post-commit.tmpl post-commit\n\n\n\n将下面内容复制到post-commit脚本中\n#!&#x2F;bin&#x2F;sh\n\nREPOS&#x3D;&quot;$1&quot;              #仓库路径\nREV&#x3D;&quot;$2&quot;                #版本修订号\nTXN_NAME&#x3D;&quot;$3&quot;\n\n\nWGET&#x3D;&#x2F;usr&#x2F;bin&#x2F;wget               #这个wget命令，所以服务器需要安装wget\nSVNLOOK&#x3D;&#x2F;opt&#x2F;csvn&#x2F;bin&#x2F;svnlook    #这个需要找到svn的安装目录，然后找到svnlook即可。\nHOME&#x3D;&#x2F;var&#x2F;www&#x2F;\n\nUUID&#x3D;&#96;$SVNLOOK uuid $REPOS&#96;\nNOTIFY_URL&#x3D;&quot;subversion&#x2F;$&#123;UUID&#125;&#x2F;notifyCommit?rev&#x3D;$&#123;REV&#125;&quot;\nCRUMB_ISSUER_URL&#x3D;&#39;crumbIssuer&#x2F;api&#x2F;xml?xpath&#x3D;concat(&#x2F;&#x2F;crumbRequestField,&quot;:&quot;,&#x2F;&#x2F;crumb)&#39;\n\n#编写对应函数\nfunction notifyCI &#123;\n\t\n\tCISERVER&#x3D;$1\n\n\tHEADER&#x3D;&quot;Content-Type:text&#x2F;plain;charset&#x3D;UTF-8&quot;\n\tCRUMB&#x3D;&#96;$WGET --auth-no-challenge --output-document - $&#123;CISERVER&#125;&#x2F;$&#123;CRUMB_ISSUER_URL&#125;&#96;\n\tif [ &quot;$CRUMB&quot; !&#x3D; &quot;&quot; ]; then HEADER&#x3D;$CRUMB; fi\n\n\t$WGET \\\n\t\t--auth-no-challenge \\\n\t\t--header $HEADER \\\n\t\t--post-data &quot;&#96;$SVNLOOK changed --revision $REV $REPOS&#96;&quot; \\\n\t\t--output-document &quot;-&quot;\\\n\t\t--timeout&#x3D;2 \\\n\t\t$&#123;CISERVER&#125;&#x2F;$&#123;NOTIFY_URL&#125;\n&#125;\n#发送请求\nnotifyCI &quot;http:&#x2F;&#x2F;192.168.203.152:8088&quot;  #这个是jenkins的地址。\n\n\n\n\n这样就可以在轮询SCM里实现自动发布构建。\ngit的webhook这个需要安装Generic Webhook Trigger插件，在插件管理搜索直接安装。\n任务中配置Generic Webhook Trigger\n\n\n\n配置gogs里的仓库\n\n配置钩子\n\n\n\n\n\ntrigger的配置中也有写明用法。\n","slug":"Jenkins自动化构建","date":"2019-07-08T07:14:28.000Z","categories_index":"CI工具","tags_index":"CI工具","author_index":"96loveslife"}]